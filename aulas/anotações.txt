
> O JavaScript � essencial para quem quer trabalhar com web, n�o tem como fugir disto.
> #Dica: Ferramenta para anota��es
	notion.so
> #Dica: Desenhar mocap de aplica��es
	figma.com
> Como se d� a utiliza��o do Node?
	Back-end, Banco de dados, defini��o de rotas...
	� o motor do chrome para interpretar JS, s� que fora do navegador, foi desacoplado.
> � necess�rio instalar o Node como gerenciador de pacote para facilitar a desinstala��o, etc.
	sando o chocolatey. #INstalling Node.js via package manager.
> JSON � uma estrutura de dados dentro da programa��o que faz a comunica��o do Back-End com o Front-End.
> Criar projeto Back-End
	npm init -y
> Instalar Framework de rotas
	npm install express
> Abordagem de SPA
	As requisi��es trazem apenas dados como respostas e, com esses dados, o Front-end pode preencher as infoma��es na tela (Resposta JSON)
> Criando o projeto Front-End React
	npm executa pacote externo sem a necessidade de instalar. npm realiza a instala��o.
	npx create-react-app Front-End
> JavaScript core
	Respons�vel pela comunica��o do React com o sistema operacional mobile.
> Rotas e recursos
	Rotas correspondem ao caminho completo, já os recursos são páginas especificas, faz parte das rotas.
> Métodos HTTP:
	GET: Buscar uma informação do back-end
		Quando eu acesso a rota no navegador.
	POST: Ciar uma informação no back-end
	PUT: Alterar uma informação no back-end
	DELETE: Deletar uma informação no back-end

> Tipos de parâmetros:
	QUERY PARAMS: parâmetros nomeados enviados na rota após "?" (Filtros, paginação)
	ROUTE PARAMS: parâmetros utilizados para identificar recursos
	REQUEST BODY: Corpo da requisição, utilizado para criar ou alterar recursos

> Banco de dados:
	SQL: MySQL, SQLite, PostgreSQL, Oracle, Microsoft SQL Server
	NOSQL: MongoDB, CouchDB, etc

> Configuração de Banco de dados
	Drive: SELECT * FROM users
	Query: Builder: taable('users').select('*').where()
	http://knexjs.org/
	Iniciar knex
		npx knex init

> Entidades da aplicação
	ONG
	Caso (Incident)

> Funcionalidades da aplicação
	Login de ONG
	Logout de ONG
	Cadastro de ONG
	Cadastrar novos casos
	Deletar casos
	Listar casos especificos de uma ONG
	Listar todos os casos
	Entrar em contato com a ONG

> Migration
	É uma forma de criar tabelas e manter um histórico das tabelas que foram criadas, alteradas, como se fosse um controle de versão do nosso banco de dados.
	Criar uma Migration
		npx knex migrate:make create_ongs
			neste momento é criado o arquivo dentro do banco de dados com os exports.up e .down
			error: sqlite does not support inserting default values:
				esse errro ocorre porque o sqlite não suporta valores padrões para as colunas do banco de dados.
			solução: adicionar useNullAsDefault: true no ambiente, no arquivo knexfile.js
	No arquivo criado pela Migrations
		O Método Up é Respons�vel por criar a tabela.
		O Método Down é pra caso haja um problema, o que deve ser desfeito. (normalmente é deletar a tabela)
			knex.schema.dropTable('ongs');
	Criar a tabela
		npx knex migrate:latest
	Configurar chave estrangeira de uma tabela	
		table.string('ong_id').notNullable();
        table.foreign('ong_id').references('id').inTable('ongs');
	Desfazer criação da Migrate (migrate:latest)
		npx knex migrate:rollback
	Listar Migrates que foram criadas
		npx knex migrate:status
Gerar numero sequencial para o campo id
	const crypto = require('crypto');
		crypt é um pacote criptografia, mas pode nos auxiliar na criação de numeros sequenciais para o nosso campo
		